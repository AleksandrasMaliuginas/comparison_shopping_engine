// <auto-generated />
using System;
using ComparisonEngine;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ComparisonEngine.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210402073727_Mig1")]
    partial class Mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Attribute", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Value")
                        .IsUnique();

                    b.ToTable("attributes", "comparison_engine");
                });

            modelBuilder.Entity("Domain.EShop", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("eshops", "comparison_engine");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<double>("Popularity")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("products", "comparison_engine");
                });

            modelBuilder.Entity("Domain.ProductAttribute", b =>
                {
                    b.Property<double>("ProductId")
                        .HasColumnType("double precision");

                    b.Property<double>("AttributeId")
                        .HasColumnType("double precision");

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("products_attributes", "comparison_engine");
                });

            modelBuilder.Entity("Domain.RealProduct", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<double>("AbstractProductId")
                        .HasColumnType("double precision");

                    b.Property<double>("EShopId")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastCheck")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbstractProductId");

                    b.HasIndex("EShopId");

                    b.ToTable("real_products", "comparison_engine");
                });

            modelBuilder.Entity("Domain.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Attribute", "Attribute")
                        .WithMany("Products")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.RealProduct", b =>
                {
                    b.HasOne("Domain.Product", "AbstractProduct")
                        .WithMany("RealProducts")
                        .HasForeignKey("AbstractProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EShop", "EShop")
                        .WithMany("RealProducts")
                        .HasForeignKey("EShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbstractProduct");

                    b.Navigation("EShop");
                });

            modelBuilder.Entity("Domain.Attribute", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.EShop", b =>
                {
                    b.Navigation("RealProducts");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("RealProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
